name: Nodejs Docker Image Build and Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - master

env:
  node_version: '12.x'

jobs:
  npm-build-test:
    name: 'npm build & npm test'
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-

    - name: Use Node.js ${{ env.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node-version }}

    - run: npm ci
      env:
        NPM_TOKEN: ${{ secrets.PAT_GITHUB_READ_PACKAGES }}

    - run: npm test
      env:
        NPM_TOKEN: ${{ secrets.PAT_GITHUB_READ_PACKAGES }}
        CI: true

  publish:
    name: Build and publish docker image
    runs-on: ubuntu-latest
    needs: npm-build-test

    steps:
    - name: Export repository name to environment
      run: echo GIT_REPO_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}') >> $GITHUB_ENV
      shell: bash

    - name: Checkout
      uses: actions/checkout@v2

    - name: Extract version from package.json
      run: echo app-version=$(node -p "require('./package.json').version") >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.GIT_REPO_NAME }}
        IMAGE_TAG: ${{ env.app-version }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can

        docker build . --build-arg NPM_TOKEN=${{ secrets.PAT_GITHUB_READ_PACKAGES }} -t ngin/${ECR_REPOSITORY}
        docker tag ngin/${ECR_REPOSITORY}:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag ngin/${ECR_REPOSITORY}:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    name: Deploy to acceptance environment
    runs-on: ubuntu-latest
    needs: publish

    steps:
    - name: Export repository name to environment
      run: echo GIT_REPO_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}') >> $GITHUB_ENV
      shell: bash

    - name: Checkout
      uses: actions/checkout@v2

    - name: Extract version from package.json
      run: echo app-version=$(node -p "require('./package.json').version") >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.GIT_REPO_NAME }}
        IMAGE_TAG: ${{ env.app-version }}

      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.GIT_REPO_NAME }}
        image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.GIT_REPO_NAME }}
        cluster: app
        wait-for-service-stability: true
